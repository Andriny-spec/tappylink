// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ASSINANTE
}

enum SubscriptionStatus {
  ATIVA
  PENDENTE
  CANCELADA
  EXPIRADA
  TRIAL
}

enum PaymentStatus {
  PENDENTE
  APROVADO
  RECUSADO
  REEMBOLSADO
  CANCELADO
}

enum PaymentMethod {
  PIX
  CARTAO_CREDITO
  BOLETO
  TRANSFERENCIA
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  password      String
  role          Role          @default(ASSINANTE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relacionamentos
  profile       Profile?
  subscriptions Subscription[]
  orders        Order[]       // Pedidos feitos pelo usuário

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  biography   String?
  phone       String?
  address     String?
  city        String?
  state       String?
  facebook    String?
  linkedin    String?
  instagram   String?
  whatsapp    String?
  telegram    String?
  tiktok      String?
  photo       String?
  qrCodeId    String   @unique @default(cuid()) // ID único para QR Code
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Métricas
  views       Int      @default(0)
  shares      Int      @default(0)
  clicks      Int      @default(0)

  // Relacionamento com User
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Plan {
  id              String          @id @default(cuid())
  name            String
  description     String
  price           Decimal         @db.Decimal(10, 2)
  discountPrice   Decimal?        @db.Decimal(10, 2)    // Preço com desconto (opcional)
  durationDays    Int             // Duração em dias
  features        String[]        // Lista de recursos incluídos
  isPopular       Boolean         @default(false)       // Destaque para plano popular
  isActive        Boolean         @default(true)        // Se o plano está ativo para vendas
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relacionamentos
  subscriptions   Subscription[]  // Assinaturas deste plano
  orders          Order[]         // Pedidos relacionados a este plano

  @@map("plans")
}

model Subscription {
  id              String              @id @default(cuid())
  userId          String              // ID do usuário assinante
  planId          String              // ID do plano
  status          SubscriptionStatus  @default(PENDENTE)
  startDate       DateTime?           // Data de início
  endDate         DateTime?           // Data de expiração
  canceledAt      DateTime?           // Data de cancelamento
  autoRenew       Boolean             @default(true)    // Renovação automática
  lastOrderId     String?             // ID do último pedido relacionado
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relacionamentos
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            Plan                @relation(fields: [planId], references: [id])
  orders          Order[]             // Pedidos relacionados a esta assinatura

  @@map("subscriptions")
}

model Order {
  id                String          @id @default(cuid())
  userId            String          // ID do usuário que fez o pedido
  planId            String          // ID do plano adquirido
  subscriptionId    String?         // ID da assinatura relacionada (pode ser nulo para o primeiro pedido)
  amount            Decimal         @db.Decimal(10, 2)  // Valor total
  paymentMethod     PaymentMethod?  // Método de pagamento
  paymentStatus     PaymentStatus   @default(PENDENTE)  // Status do pagamento
  paymentIntentId   String?         // ID da intenção de pagamento no gateway
  paymentDate       DateTime?       // Data de pagamento
  transactionId     String?         // ID da transação no gateway de pagamento
  receiptUrl        String?         // URL do recibo/comprovante
  notes             String?         // Observações
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relacionamentos
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              Plan            @relation(fields: [planId], references: [id])
  subscription      Subscription?   @relation(fields: [subscriptionId], references: [id])

  @@map("orders")
}
