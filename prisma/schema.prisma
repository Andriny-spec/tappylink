generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  role          Role           @default(ASSINANTE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  profile       Profile?
  subscriptions Subscription[]

  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  biography String?
  phone     String?
  address   String?
  city      String?
  state     String?
  facebook  String?
  linkedin  String?
  instagram String?
  whatsapp  String?
  telegram  String?
  tiktok    String?
  photo     String?
  qrCodeId  String   @unique @default(cuid())
  premium   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  views     Int      @default(0)
  shares    Int      @default(0)
  clicks    Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Decimal        @db.Decimal(10, 2)
  discountPrice Decimal?       @db.Decimal(10, 2)
  durationDays  Int
  features      String[]
  isPopular     Boolean        @default(false)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id          String             @id @default(cuid())
  userId      String
  planId      String
  status      SubscriptionStatus @default(PENDENTE)
  startDate   DateTime?
  endDate     DateTime?
  canceledAt  DateTime?
  autoRenew   Boolean            @default(true)
  lastOrderId String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  orders      Order[]
  plan        Plan               @relation(fields: [planId], references: [id])
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Order {
  id              String         @id @default(cuid())
  userId          String
  planId          String
  subscriptionId  String?
  amount          Decimal        @db.Decimal(10, 2)
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus  @default(PENDENTE)
  paymentIntentId String?
  paymentDate     DateTime?
  transactionId   String?
  receiptUrl      String?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  plan            Plan           @relation(fields: [planId], references: [id])
  subscription    Subscription?  @relation(fields: [subscriptionId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

enum Role {
  ADMIN
  ASSINANTE
}

enum SubscriptionStatus {
  ATIVA
  PENDENTE
  CANCELADA
  EXPIRADA
  TRIAL
}

enum PaymentStatus {
  PENDENTE
  APROVADO
  RECUSADO
  REEMBOLSADO
  CANCELADO
}

enum PaymentMethod {
  PIX
  CARTAO_CREDITO
  BOLETO
  TRANSFERENCIA
}
